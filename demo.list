ca65 V2.18 - Ubuntu 2.19-1
Main file   : demo.asm
Current file: demo.asm

000000r 1               ; Program: DEMO
000000r 1               ; File: demo.asm
000000r 1               ; Purpose: Show a 106 character by 60 line display
000000r 1               ; By: Curtis Whitley
000000r 1               ;
000000r 1               
000000r 1               .org $080D
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1  4C 28 09        jmp start      ; skip the data definitions, and go to code
000810  1               
000810  1               .include "x16.inc"
000810  2               .ifndef X16_INC
000810  2               X16_INC  = 1
000810  2               
000810  2               .ifndef __CX16__
000810  2               __CX16__ = 1
000810  2               .endif
000810  2               
000810  2               ; X16 addresses, values, and macros
000810  2               ; Accurate for ROM release R38
000810  2               
000810  2               SD_DEVICE   = 8 ; also host file system on emulator if no SD image mounted
000810  2               DISK_DEVICE = SD_DEVICE ; change if to be loaded off IEC device
000810  2               
000810  2               
000810  2               ; RAM Addresses
000810  2               
000810  2               ; Kernal Registers
000810  2               r0                = $02
000810  2               r0L               = r0
000810  2               r0H               = r0+1
000810  2               r1                = $04
000810  2               r1L               = r1
000810  2               r1H               = r1+1
000810  2               r2                = $06
000810  2               r2L               = r2
000810  2               r2H               = r2+1
000810  2               r3                = $08
000810  2               r3L               = r3
000810  2               r3H               = r3+1
000810  2               r4                = $0A
000810  2               r4L               = r4
000810  2               r4H               = r4+1
000810  2               r5                = $0C
000810  2               r5L               = r5
000810  2               r5H               = r5+1
000810  2               r6                = $0E
000810  2               r6L               = r6
000810  2               r6H               = r6+1
000810  2               r7                = $10
000810  2               r7L               = r7
000810  2               r7H               = r7+1
000810  2               r8                = $12
000810  2               r8L               = r8
000810  2               r8H               = r8+1
000810  2               r9                = $14
000810  2               r9L               = r9
000810  2               r9H               = r9+1
000810  2               r10               = $16
000810  2               r10L              = r10
000810  2               r10H              = r10+1
000810  2               r11               = $18
000810  2               r11L              = r11
000810  2               r11H              = r11+1
000810  2               r12               = $1A
000810  2               r12L              = r12
000810  2               r12H              = r12+1
000810  2               r13               = $1C
000810  2               r13L              = r13
000810  2               r13H              = r13+1
000810  2               r14               = $1E
000810  2               r14L              = r14
000810  2               r14H              = r14+1
000810  2               r15               = $20
000810  2               r15L              = r15
000810  2               r15H              = r15+1
000810  2               
000810  2               ; I/O Registers
000810  2               VERA_addr_low     = $9F20
000810  2               VERA_addr_high    = $9F21
000810  2               VERA_addr_bank    = $9F22
000810  2               VERA_data0        = $9F23
000810  2               VERA_data1        = $9F24
000810  2               VERA_ctrl         = $9F25
000810  2               VERA_ien          = $9F26
000810  2               VERA_isr          = $9F27
000810  2               VERA_irqline_l    = $9F28
000810  2               VERA_dc_video     = $9F29 ; VERA_ctrl(1) (DCSEL) = 0
000810  2               VERA_dc_hscale    = $9F2A ; VERA_ctrl(1) (DCSEL) = 0
000810  2               VERA_dc_vscale    = $9F2B ; VERA_ctrl(1) (DCSEL) = 0
000810  2               VERA_dc_border    = $9F2C ; VERA_ctrl(1) (DCSEL) = 0
000810  2               VERA_dc_hstart    = $9F29 ; VERA_ctrl(1) (DCSEL) = 1
000810  2               VERA_dc_hstop     = $9F2A ; VERA_ctrl(1) (DCSEL) = 1
000810  2               VERA_dc_vsstart   = $9F2B ; VERA_ctrl(1) (DCSEL) = 1
000810  2               VERA_dc_vstop     = $9F2C ; VERA_ctrl(1) (DCSEL) = 1
000810  2               VERA_L0_config    = $9F2D
000810  2               VERA_L0_mapbase   = $9F2E
000810  2               VERA_L0_tilebase  = $9F2F
000810  2               VERA_L0_hscroll_l = $9F30
000810  2               VERA_L0_hscroll_h = $9F31
000810  2               VERA_L0_vscroll_l = $9F32
000810  2               VERA_L0_vscroll_h = $9F33
000810  2               VERA_L1_config    = $9F34
000810  2               VERA_L1_mapbase   = $9F35
000810  2               VERA_L1_tilebase  = $9F36
000810  2               VERA_L1_hscroll_l = $9F37
000810  2               VERA_L1_hscroll_h = $9F38
000810  2               VERA_L1_vscroll_l = $9F39
000810  2               VERA_L1_vscroll_h = $9F3A
000810  2               VERA_audio_ctrl   = $9F3B
000810  2               VERA_audio_rate   = $9F3C
000810  2               VERA_audio_data   = $9F3D
000810  2               VERA_spi_data     = $9F3E
000810  2               VERA_spi_ctrl     = $9F3F
000810  2               
000810  2               ROM_BANK          = $9F60
000810  2               RAM_BANK          = $9F61
000810  2               
000810  2               YM_reg            = $9FE0
000810  2               YM_data           = $9FE1
000810  2               
000810  2               ; VERA Registers values
000810  2               VSYNC_BIT         = $01
000810  2               SPRCOL_BIT        = $04
000810  2               DISPLAY_SCALE     = $80 ; 1X zoom
000810  2               ADDRSEL           = $01
000810  2               DCSEL             = $02
000810  2               
000810  2               ENABLE_CURRENT_FIELD    = $80
000810  2               ENABLE_SPRITES          = $40
000810  2               ENABLE_LAYER_1          = $20
000810  2               ENABLE_LAYER_0          = $10
000810  2               
000810  2               OUTPUT_MODE_DISABLED    = $00
000810  2               OUTPUT_MODE_VGA         = $01
000810  2               OUTPUT_MODE_NTSC        = $02
000810  2               OUTPUT_MODE_RGBI        = $03
000810  2               
000810  2               SPRITE_MODE_4_BPP = $00
000810  2               SPRITE_MODE_8_BPP = $80
000810  2               
000810  2               SPRITE_COLL_MASK_NONE   =   $00
000810  2               SPRITE_COLL_MASK_0      =   $10
000810  2               SPRITE_COLL_MASK_1      =   $20
000810  2               SPRITE_COLL_MASK_2      =   $40
000810  2               SPRITE_COLL_MASK_3      =   $80
000810  2               
000810  2               SPRITE_ZDEPTH_DISABLED  =   $00
000810  2               SPRITE_ZDEPTH_ABOVE_BG  =   $04
000810  2               SPRITE_ZDEPTH_ABOVE_L0  =   $08
000810  2               SPRITE_ZDEPTH_ABOVE_L1  =   $0C
000810  2               
000810  2               SPRITE_V_FLIP           =   $02
000810  2               SPRITE_H_FLIP           =   $01
000810  2               
000810  2               SPRITE_HEIGHT_08_PIXELS =   $00
000810  2               SPRITE_HEIGHT_16_PIXELS =   $40
000810  2               SPRITE_HEIGHT_32_PIXELS =   $80
000810  2               SPRITE_HEIGHT_64_PIXELS =   $C0
000810  2               
000810  2               SPRITE_WIDTH_08_PIXELS  =   $00
000810  2               SPRITE_WIDTH_16_PIXELS  =   $10
000810  2               SPRITE_WIDTH_32_PIXELS  =   $20
000810  2               SPRITE_WIDTH_64_PIXELS  =   $30
000810  2               
000810  2               ; Sprite data structure
000810  2               SPRITE_ADDR_LO  =   0       ; Address(12:5)@(7:0)
000810  2               SPRITE_ADDR_HI  =   1       ; Mode@(7), Address(16:3)@(3:0)
000810  2               SPRITE_X_LO     =   2       ; X(7:0)
000810  2               SPRITE_X_HI     =   3       ; X(9:8)@(1:0)
000810  2               SPRITE_Y_LO     =   4       ; Y(7:0)
000810  2               SPRITE_Y_HI     =   5       ; Y(9:8)@(1:0)
000810  2               SPRITE_CTRL     =   6       ; Collision mask@(7:4), Z-depth@(3:2), V-flip@(1), H-flip@(0)
000810  2               SPRITE_HEIGHT   =   7       ; Height(7:6), Width@(5:4), Palette offset@(3:0)
000810  2               SPRITE_ATTR_SIZE =  8
000810  2               
000810  2               ; Tile related definitions
000810  2               TILE_MAP_WIDTH_032  = $00   ; 32 tiles across
000810  2               TILE_MAP_WIDTH_064  = $10   ; 64 tiles across
000810  2               TILE_MAP_WIDTH_128  = $20   ; 128 tiles across
000810  2               TILE_MAP_WIDTH_256  = $30   ; 256 tiles across
000810  2               TILE_MAP_HEIGHT_032 = $00   ; 32 tiles down
000810  2               TILE_MAP_HEIGHT_064 = $40   ; 64 tiles down
000810  2               TILE_MAP_HEIGHT_128 = $80   ; 128 tiles down
000810  2               TILE_MAP_HEIGHT_256 = $C0   ; 256 tiles down
000810  2               
000810  2               TILE_WIDTH_08_PIXELS = $00  ; 8 pixels wide
000810  2               TILE_WIDTH_16_PIXELS = $01  ; 16 pixels wide
000810  2               TILE_HEIGHT_08_PIXELS = $00 ; 8 pixels high
000810  2               TILE_HEIGHT_16_PIXELS = $02 ; 16 pixels high
000810  2               
000810  2               BITMAP_MODE          = $04  ; layer bitmap mode
000810  2               TILE_MODE            = $00  ; layer tile mode
000810  2               
000810  2               LAYER_COLOR_DEPTH_1_BPP = $00 ; 1 bit per pixel (2 colors)
000810  2               LAYER_COLOR_DEPTH_2_BPP = $01 ; 2 bits per pixel (4 colors)
000810  2               LAYER_COLOR_DEPTH_4_BPP = $02 ; 4 bits per pixel (16 colors)
000810  2               LAYER_COLOR_DEPTH_8_BPP = $03 ; 8 bits per pixel (256 colors)
000810  2               
000810  2               ; Emulator Registers
000810  2               GIF_ctrl          = $9FB5
000810  2               
000810  2               ; ROM Banks
000810  2               KERNAL_ROM_BANK   = 0
000810  2               KEYBOARD_ROM_BANK = 1
000810  2               CBDOS_ROM_BANK    = 2
000810  2               GEOS_ROM_BANK     = 3
000810  2               BASIC_ROM_BANK    = 4
000810  2               MONITOR_ROM_BANK  = 5
000810  2               CHARSET_ROM_BANK  = 6
000810  2               
000810  2               ; Banked Addresses
000810  2               RAM_WIN           = $A000
000810  2               RAM_WIN_SIZE      = $2000
000810  2               ROM_WIN           = $C000
000810  2               
000810  2               ; Kernal Subroutines
000810  2               ENTROPY_GET                   := $FECF
000810  2               CONSOLE_set_paging_message    := $FED5
000810  2               CONSOLE_put_image             := $FED8
000810  2               CONSOLE_init                  := $FEDB
000810  2               CONSOLE_put_char              := $FEDE
000810  2               CONSOLE_get_char              := $FEE1
000810  2               MEMORY_FILL                   := $FEE4
000810  2               MEMORY_COPY                   := $FEE7
000810  2               MEMORY_CRC                    := $FEEA
000810  2               MEMORY_DECOMPRESS             := $FEED
000810  2               SPRITE_set_image              := $FEF0
000810  2               SPRITE_set_position           := $FEF3
000810  2               FB_init                       := $FEF6
000810  2               FB_get_info                   := $FEF9
000810  2               FB_set_palette                := $FEFC
000810  2               FB_cursor_position            := $FEFF
000810  2               FB_cursor_next_line           := $FF02
000810  2               FB_get_pixel                  := $FF05
000810  2               FB_get_pixels                 := $FF08
000810  2               FB_set_pixel                  := $FF0B
000810  2               FB_set_pixels                 := $FF0E
000810  2               FB_set_8_pixels               := $FF11
000810  2               FB_set_8_pixels_opaque        := $FF14
000810  2               FB_fill_pixels                := $FF17
000810  2               FB_filter_pixels              := $FF1A
000810  2               FB_move_pixels                := $FF1D
000810  2               GRAPH_init                    := $FF20
000810  2               GRAPH_clear                   := $FF23
000810  2               GRAPH_set_window              := $FF26
000810  2               GRAPH_set_colors              := $FF29
000810  2               GRAPH_draw_line               := $FF2C
000810  2               GRAPH_draw_rect               := $FF2F
000810  2               GRAPH_move_rect               := $FF32
000810  2               GRAPH_draw_oval               := $FF35
000810  2               GRAPH_draw_image              := $FF38
000810  2               GRAPH_set_font                := $FF3B
000810  2               GRAPH_get_char_size           := $FF3E
000810  2               GRAPH_put_char                := $FF41
000810  2               MONITOR                       := $FF44
000810  2               ENTER_BASIC                   := $FF47
000810  2               CLOSE_ALL                     := $FF4A
000810  2               CLOCK_SET_DATE_TIME           := $FF4D
000810  2               CLOCK_GET_DATE_TIME           := $FF50
000810  2               JOYSTICK_SCAN                 := $FF53
000810  2               JOYSTICK_GET                  := $FF56
000810  2               SCREEN_SET_MODE               := $FF5F
000810  2               SCREEN_SET_CHARSET            := $FF62
000810  2               PFKEY                         := $FF65
000810  2               MOUSE_CONFIG                  := $FF68
000810  2               MOUSE_GET                     := $FF6B
000810  2               JSRFAR_kernal_addr            := $FF6E
000810  2               MOUSE_SCAN                    := $FF71
000810  2               FETCH                         := $FF74
000810  2               STASH                         := $FF77
000810  2               CMPARE                        := $FF7A
000810  2               PRIMM                         := $FF7D
000810  2               
000810  2               SCINIT                        := $FF81
000810  2               IOINIT                        := $FF84
000810  2               RAMTAS                        := $FF87
000810  2               RESTOR                        := $FF8A
000810  2               LKUPLA                        := $FF8D
000810  2               SETMSG                        := $FF90
000810  2               SECOND                        := $FF93
000810  2               TKSA                          := $FF96
000810  2               MEMTOP                        := $FF99
000810  2               MEMBOT                        := $FF9C
000810  2               SETTMO                        := $FFA2
000810  2               IECIN                         := $FFA5
000810  2               IECOUT                        := $FFA8
000810  2               UNTALK                        := $FFAB
000810  2               UNLISTEN                      := $FFAE
000810  2               LISTEN                        := $FFB1
000810  2               TALK                          := $FFB4
000810  2               READST                        := $FFB7
000810  2               SETLFS                        := $FFBA
000810  2               SETNAM                        := $FFBD
000810  2               OPEN                          := $FFC0
000810  2               CLOSE                         := $FFC3
000810  2               CHKIN                         := $FFC6
000810  2               CHKOUT                        := $FFC9
000810  2               CLRCHN                        := $FFCC
000810  2               CHRIN                         := $FFCF
000810  2               BASIN                         := CHRIN ; alias
000810  2               CHROUT                        := $FFD2
000810  2               BSOUT                         := CHROUT ; alias
000810  2               LOAD                          := $FFD5
000810  2               SAVE                          := $FFD8
000810  2               SETTIM                        := $FFDB
000810  2               RDTIM                         := $FFDE
000810  2               STOP                          := $FFE1
000810  2               GETIN                         := $FFE4
000810  2               CLALL                         := $FFE7
000810  2               UDTIM                         := $FFEA
000810  2               SCREEN                        := $FFED
000810  2               PLOT                          := $FFF0
000810  2               IOBASE                        := $FFF3
000810  2               
000810  2               ; BASIC Vectors
000810  2               BASIC_PANIC       := $C000
000810  2               BASIC_INIT        := $C003
000810  2               
000810  2               
000810  2               ; VRAM Addresses
000810  2               VRAM_petscii   = $0F800
000810  2               VRAM_psg       = $1F9C0
000810  2               VRAM_palette   = $1FA00
000810  2               VRAM_sprattr   = $1FC00
000810  2               
000810  2               ; RAM Vectors
000810  2               IRQVec         = $0314
000810  2               BRKVec         = $0316
000810  2               NMIVec         = $0318
000810  2               FETVec         = $03AF
000810  2               ;STAVec         = TBD
000810  2               ;CMPVec         = TBD
000810  2               
000810  2               
000810  2               ;   Macros
000810  2               
000810  2               .macro JSRFAR far_sr_addr, bank
000810  2               	jsr JSRFAR_kernal_addr
000810  2               	.addr far_sr_addr
000810  2               	.byte bank
000810  2               .endmacro
000810  2               
000810  2               .endif
000810  2               
000810  2               ; set data port 0 to start writing to VRAM address
000810  2               ; the address is a constant
000810  2               .macro VERA_SET_ADDR0 vram_addr, stride
000810  2                   .scope
000810  2                       .ifnblank stride
000810  2                           lda #((^vram_addr) | (stride << 4))
000810  2                       .else
000810  2                           lda #((^vram_addr) | $10)
000810  2                       .endif
000810  2               
000810  2                       stz VERA_ctrl
000810  2                       sta VERA_addr_bank
000810  2                       lda #>vram_addr
000810  2                       sta VERA_addr_high
000810  2                       lda #<vram_addr
000810  2                       sta VERA_addr_low
000810  2                   .endscope
000810  2               .endmacro
000810  2               
000810  2               ; set data port 1 to start writing to VRAM address
000810  2               ; the address is a constant
000810  2               .macro VERA_SET_ADDR1 vram_addr, stride
000810  2                   .scope
000810  2                       lda #ADDRSEL
000810  2                       sta VERA_ctrl
000810  2               
000810  2                       .ifnblank stride
000810  2                           lda #((^vram_addr) | (stride << 4))
000810  2                       .else
000810  2                           lda #((^vram_addr) | $10)
000810  2                       .endif
000810  2               
000810  2                       sta VERA_addr_bank
000810  2                       lda #>vram_addr
000810  2                       sta VERA_addr_high
000810  2                       lda #<vram_addr
000810  2                       sta VERA_addr_low
000810  2                   .endscope
000810  2               .endmacro
000810  2               
000810  2               ; set data port 0 to start writing to VRAM address
000810  2               ; the address is in X (LO), Y (HI), and A (BANK)
000810  2               .macro VERA_SET_ADDR0_XYA stride
000810  2                   .scope
000810  2                       .ifnblank stride
000810  2                           ora #(stride << 4)
000810  2                       .else
000810  2                           ora #($10)
000810  2                       .endif
000810  2               
000810  2                       stz VERA_ctrl
000810  2                       sta VERA_addr_bank
000810  2                       sty VERA_addr_high
000810  2                       stx VERA_addr_low
000810  2                   .endscope
000810  2               .endmacro
000810  2               
000810  2               ; set data port 1 to start writing to VRAM address
000810  2               ; the address is in X (LO), Y (HI), and A (BANK)
000810  2               .macro VERA_SET_ADDR1_XYA stride
000810  2                   .scope
000810  2                       stz VERA_ctrl
000810  2                       inc VERA_ctrl
000810  2               
000810  2                       .ifnblank stride
000810  2                           ora #(stride << 4)
000810  2                       .else
000810  2                           ora #($10)
000810  2                       .endif
000810  2               
000810  2                       sta VERA_addr_bank
000810  2                       sty VERA_addr_high
000810  2                       stx VERA_addr_low
000810  2                   .endscope
000810  2               .endmacro
000810  2               
000810  2               .macro RAM2VRAM ram_addr, vram_addr, num_bytes
000810  2                  .scope
000810  2                     ; set data port 0 to start writing to VRAM address
000810  2                     stz VERA_ctrl
000810  2                     lda #($10 | ^vram_addr) ; stride = 1
000810  2                     sta VERA_addr_bank
000810  2                     lda #>vram_addr
000810  2                     sta VERA_addr_high
000810  2                     lda #<vram_addr
000810  2                     sta VERA_addr_low
000810  2                      ; ZP pointer = start of video data in CPU RAM
000810  2                     lda #<ram_addr
000810  2                     sta ZP_PTR_LO
000810  2                     lda #>ram_addr
000810  2                     sta ZP_PTR_HI
000810  2                     ; use index pointers to compare with number of bytes to copy
000810  2                     ldx #0
000810  2                     ldy #0
000810  2                  vram_loop:
000810  2                     lda (ZP_PTR),y
000810  2                     sta VERA_data0
000810  2                     iny
000810  2                     cpx #>num_bytes ; last page yet?
000810  2                     beq check_end
000810  2                     cpy #0
000810  2                     bne vram_loop ; not on last page, Y non-zero
000810  2                     inx ; next page
000810  2                     inc ZP_PTR_HI
000810  2                     bra vram_loop
000810  2                  check_end:
000810  2                     cpy #<num_bytes ; last byte of last page?
000810  2                     bne vram_loop ; last page, before last byte
000810  2                  .endscope
000810  2               .endmacro
000810  2               
000810  2               .macro FILLVRAM value, vram_addr, num_bytes
000810  2                  .scope
000810  2                     ; set data port 0 to start writing to VRAM address
000810  2                     stz VERA_ctrl
000810  2                     lda #($10 | ^vram_addr) ; stride = 1
000810  2                     sta VERA_addr_bank
000810  2                     lda #>vram_addr
000810  2                     sta VERA_addr_high
000810  2                     lda #<vram_addr
000810  2                     sta VERA_addr_low
000810  2                     ; use index pointers to compare with number of bytes to copy
000810  2                     ldx #0
000810  2                     ldy #0
000810  2                  vram_loop:
000810  2                     lda #value
000810  2                     sta VERA_data0
000810  2                     iny
000810  2                     cpx #>num_bytes ; last page yet?
000810  2                     beq check_end
000810  2                     cpy #0
000810  2                     bne vram_loop ; not on last page, Y non-zero
000810  2                     inx ; next page
000810  2                     inc ZP_PTR_HI
000810  2                     bra vram_loop
000810  2                  check_end:
000810  2                     cpy #<num_bytes ; last byte of last page?
000810  2                     bne vram_loop ; last page, before last byte
000810  2                  .endscope
000810  2               .endmacro
000810  2               
000810  1               .include "zeropage.inc"
000810  2               ; Zero Page custom variables
000810  2               
000810  2               ZP_PTR              = $30    ; temporary pointer #1
000810  2               ZP_PTR_LO           = $30
000810  2               ZP_PTR_HI           = $31
000810  2               
000810  2               ZP_TILE_INDEX       = $35    ; counts tiles in tile bitmap data or on screen
000810  2               ZP_TILE_ROW         = $36    ; screen tile row
000810  2               ZP_TILE_COL         = $37    ; screen tile column
000810  2               ZP_CHAR_CNT         = $38    ; number of characters to show
000810  2               
000810  2               ZP_PTR2             = $3A    ; temporary pointer #2
000810  2               ZP_PTR2_LO          = $3A
000810  2               ZP_PTR2_HI          = $3B
000810  2               
000810  1               .include "text.inc"
000810  2               ; File: text.inc
000810  2               ; Purpose: Display text on the screen
000810  2               ;
000810  2               ; This code shows 5x7 pixel characters in 6x8 pixel cells.
000810  2               ; Because each character position is 6 pixels wide, which
000810  2               ; is not a standard tile width, we use both VERA layers,
000810  2               ; with L0 and L1 offset in the X direction by 2 pixels.
000810  2               ; Also, because a character postion may start on any even
000810  2               ; pixel boundary (relative to its VERA layer), there are
000810  2               ; 2 separate sets of tiles. One set of tiles has character
000810  2               ; data with a 0-pixel offset from the tile position. The
000810  2               ; other set of tiles has character data with a 4-pixel offset
000810  2               ; from the tile position. The 2 tile sets are combined
000810  2               ; into a single, long set of tiles for loading and usage in
000810  2               ; the VERA, so there is only 1 tile map involved.
000810  2               ;
000810  2               ; Here is an illustration of how adjacent 6-pixel wide
000810  2               ; character cells are populated: 'SC' references 'screen'
000810  2               ; pixels, 'L0' is for 'layer 0', and 'L1' is for 'layer 1'.
000810  2               ; The 'SC' number lines count pixels in the horizontal
000810  2               ; (X) direction. The 'L0' number line shows bit offsets
000810  2               ; within tile data bytes, for 'layer 0' (note that these
000810  2               ; offsets are in reverse order from the bit positions in
000810  2               ; the data bytes, because pixel #0 is at bit position #7).
000810  2               ; The 'L1' number line shows bit offsets within tile data
000810  2               ; bytes, for 'layer 1'.
000810  2               ;
000810  2               ; Desired visible effect:
000810  2               ;
000810  2               ; SC 0000000000111111111122222222223333333333
000810  2               ; SC 0123456789012345678901234567890123456789
000810  2               ;    aaaaaabbbbbbccccccddddddeeeeeeffffff
000810  2               ;
000810  2               ; L0 0123456701234567012345670123456701234567
000810  2               ; L0 aaaaaa      cccccc      eeeeee
000810  2               ; L1       bbbbbb      dddddd      ffffff
000810  2               ; L1   0123456701234567012345670123456701234567
000810  2               ;
000810  2               
000810  2               TEXT_MAP_TILES_ACROSS       = 128
000810  2               TEXT_MAP_TILES_DOWN         = 64
000810  2               TEXT_SCREEN_TILES_ACROSS    = 106
000810  2               TEXT_SCREEN_TILES_DOWN      = 60
000810  2               TEXT_L0_MAP_BASE_ADDRESS    = $00000
000810  2               TEXT_L1_MAP_BASE_ADDRESS    = $04000
000810  2               TEXT_TILE_DATA_ADDRESS      = $08000
000810  2               
000810  2               TEXT_TILE_DATA_ADDRESS_SHIFTED   = (TEXT_TILE_DATA_ADDRESS>>(11-2))
000810  2               TEXT_L0_MAP_BASE_ADDRESS_SHIFTED = (TEXT_L0_MAP_BASE_ADDRESS>>9)
000810  2               TEXT_L1_MAP_BASE_ADDRESS_SHIFTED = (TEXT_L1_MAP_BASE_ADDRESS>>9)
000810  2               
000810  2               TILE_0_INDEX_BLANK          = 0
000810  2               TILE_0_INDEX_EMPTY          = 127
000810  2               TILE_4_INDEX_BLANK          = 96
000810  2               TILE_4_INDEX_EMPTY          = 350
000810  2               
000810  2               ;-------------------------------------------------------------------
000810  2               ; Load text character pixel data
000810  2               ;-------------------------------------------------------------------
000810  2               
000810  2  41 4C 50 48  text:   .byte   "alphtile.bin"
000814  2  54 49 4C 45  
000818  2  2E 42 49 4E  
00081C  2               end_text:
00081C  2  50 41 4C 45  palette: .byte   "palette.bin"
000820  2  54 54 45 2E  
000824  2  42 49 4E     
000827  2               end_palette:
000827  2               
000827  2               load_text_data:
000827  2  A9 01            lda	#1          ; Logical file number
000829  2  A2 08        	ldx	#SD_DEVICE  ; Device 8 = sd card
00082B  2  A0 00        	ldy	#0          ; 0=ignore address in bin file (2 first bytes)
00082D  2  20 BA FF     	jsr	SETLFS
000830  2               
000830  2  A9 0C        	lda	#(end_text-text) ; Length of filename
000832  2  A2 10        	ldx	#<text	    ; Low byte of filename address
000834  2  A0 08        	ldy	#>text	    ; High byte of filename address
000836  2  20 BD FF     	jsr	SETNAM
000839  2               
000839  2  A0 80        	ldy	#>TEXT_TILE_DATA_ADDRESS ; VERA HIGH address
00083B  2  A2 00        	ldx	#<TEXT_TILE_DATA_ADDRESS ; VERA LOW address
00083D  2  A9 02        	lda	#0+2        ; VERA BANK + 2
00083F  2  20 D5 FF     	jsr	LOAD        ; Load binary file into VRAM, ignoring 2 first bytes
000842  2  60               rts
000843  2               
000843  2               load_palette:
000843  2  A9 01            lda	#1          ; Logical file number
000845  2  A2 08        	ldx	#SD_DEVICE  ; Device 8 = sd card
000847  2  A0 00        	ldy	#0          ; 0=ignore address in bin file (2 first bytes)
000849  2  20 BA FF     	jsr	SETLFS
00084C  2               
00084C  2  A9 0B        	lda	#(end_palette-palette) ; Length of filename
00084E  2  A2 1C        	ldx	#<palette   ; Low byte of filename address
000850  2  A0 08        	ldy	#>palette   ; High byte of filename address
000852  2  20 BD FF     	jsr	SETNAM
000855  2               
000855  2  A0 FA        	ldy	#>VRAM_palette ; VERA HIGH address
000857  2  A2 00        	ldx	#<VRAM_palette ; VERA LOW address
000859  2  A9 03        	lda	#1+2        ; VERA BANK + 2
00085B  2  20 D5 FF     	jsr	LOAD        ; Load binary file into VRAM, ignoring 2 first bytes
00085E  2  60               rts
00085F  2               
00085F  2               ;-------------------------------------------------------------------
00085F  2               ; Initialize alphanumeric tile information.
00085F  2               ;-------------------------------------------------------------------
00085F  2               
00085F  2               init_text_tile_information:
00085F  2                   ; set the various VERA registers needed
00085F  2               
00085F  2                   ; setup layer 0 for text
00085F  2  A9 61            lda     #TILE_MAP_HEIGHT_064|TILE_MAP_WIDTH_128|TILE_MODE|LAYER_COLOR_DEPTH_2_BPP
000861  2  8D 2D 9F         sta     VERA_L0_config
000864  2  A9 00            lda     #TEXT_L0_MAP_BASE_ADDRESS_SHIFTED
000866  2  8D 2E 9F         sta     VERA_L0_mapbase
000869  2  A9 40            lda     #TEXT_TILE_DATA_ADDRESS_SHIFTED|TILE_HEIGHT_08_PIXELS|TILE_WIDTH_08_PIXELS
00086B  2  8D 2F 9F         sta     VERA_L0_tilebase
00086E  2  9C 30 9F         stz     VERA_L0_hscroll_l
000871  2  9C 31 9F         stz     VERA_L0_hscroll_h
000874  2  9C 32 9F         stz     VERA_L0_vscroll_l
000877  2  9C 33 9F         stz     VERA_L0_vscroll_h
00087A  2               
00087A  2                   ; setup layer 1 for text
00087A  2  A9 61            lda     #TILE_MAP_HEIGHT_064|TILE_MAP_WIDTH_128|TILE_MODE|LAYER_COLOR_DEPTH_2_BPP
00087C  2  8D 34 9F         sta     VERA_L1_config
00087F  2  A9 20            lda     #TEXT_L1_MAP_BASE_ADDRESS_SHIFTED
000881  2  8D 35 9F         sta     VERA_L1_mapbase
000884  2  A9 40            lda     #TEXT_TILE_DATA_ADDRESS_SHIFTED|TILE_HEIGHT_08_PIXELS|TILE_WIDTH_08_PIXELS
000886  2  8D 36 9F         sta     VERA_L1_tilebase
000889  2  A9 04            lda     #4      ; 4-pixel horizontal (X) offset
00088B  2  9C 37 9F         stz     VERA_L1_hscroll_l
00088E  2  9C 38 9F         stz     VERA_L1_hscroll_h
000891  2  9C 39 9F         stz     VERA_L1_vscroll_l
000894  2  9C 3A 9F         stz     VERA_L1_vscroll_h
000897  2               
000897  2                   ; setup the tile map information for both layers
000897  2  A9 10 9C 25      VERA_SET_ADDR0 TEXT_L0_MAP_BASE_ADDRESS
00089B  2  9F 8D 22 9F  
00089F  2  A9 00 8D 21  
0008A9  2  A9 01 8D 25      VERA_SET_ADDR1 TEXT_L1_MAP_BASE_ADDRESS
0008AD  2  9F A9 10 8D  
0008B1  2  22 9F A9 40  
0008BD  2  A0 00            ldy     #0                      ; start at tile row 0
0008BF  2               init_text_row:
0008BF  2  A2 00            ldx     #0                      ; start at tile column 0
0008C1  2               init_text_cell:
0008C1  2  A9 7F            lda     #TILE_0_INDEX_EMPTY     ; use transparent (empty) tile
0008C3  2  8D 23 9F         sta     VERA_data0              ; store tile index in L0
0008C6  2  8D 24 9F         sta     VERA_data1              ; store tile index in L1
0008C9  2  A9 10            lda     #(1<<4)                 ; get palette offset, flip, tile index
0008CB  2  8D 23 9F         sta     VERA_data0              ; set tile params in L0
0008CE  2  8D 24 9F         sta     VERA_data1              ; set tile params in L1
0008D1  2  E8               inx                             ; advance column index
0008D2  2  E0 80            cpx     #TEXT_MAP_TILES_ACROSS  ; are we done with columns?
0008D4  2  D0 EB            bne     init_text_cell          ; back if no
0008D6  2  C8               iny                             ; advance row index
0008D7  2  C0 40            cpy     #TEXT_MAP_TILES_DOWN    ; are we done with rows?
0008D9  2  D0 E4            bne     init_text_row           ; back if no
0008DB  2  60               rts
0008DC  2               
0008DC  2               ;-------------------------------------------------------------------
0008DC  2               ; Write text onto the screen.
0008DC  2               ;-------------------------------------------------------------------
0008DC  2               
0008DC  2               write_text:
0008DC  2  A5 38            lda     ZP_CHAR_CNT             ; any more characters to do?
0008DE  2  F0 45            beq     text_done               ; go if no
0008E0  2               
0008E0  2                   ; compute tile map addresses for row & column
0008E0  2               
0008E0  2  64 30            stz     ZP_PTR_LO               ; init upper pointer into tile map (LO)
0008E2  2  64 31            stz     ZP_PTR_HI               ; init upper pointer into tile map (HI)
0008E4  2               
0008E4  2                   ; find the row in the tile map
0008E4  2               
0008E4  2  A6 36            ldx     ZP_TILE_ROW             ; get row for text
0008E6  2  F0 10            beq     dont_inc                ; go if in row #0
0008E8  2               find_row:
0008E8  2  18               clc
0008E9  2  A5 30            lda     ZP_PTR_LO               ; get upper pointer into tile map (LO)
0008EB  2  69 00            adc     #<(TEXT_MAP_TILES_ACROSS*2) ; add map offset for a single row (LO)
0008ED  2  85 30            sta     ZP_PTR_LO               ; set upper pointer into tile map (LO)
0008EF  2  A5 31            lda     ZP_PTR_HI               ; get upper pointer into tile map (HI)
0008F1  2  69 01            adc     #>(TEXT_MAP_TILES_ACROSS*2) ; add map offset for a single row (HI)
0008F3  2  85 31            sta     ZP_PTR_HI               ; set upper pointer into tile map (HI)
0008F5  2  CA               dex                             ; any more rows to advance?
0008F6  2  D0 F0            bne     find_row                ; go if yes
0008F8  2               dont_inc:
0008F8  2               
0008F8  2                   ; find the column in the tile map
0008F8  2               
0008F8  2  18               clc
0008F9  2  A5 37            lda     ZP_TILE_COL             ; get column for text
0008FB  2  0A               asl                             ; multiply by 2
0008FC  2  65 30            adc     ZP_PTR_LO               ; add upper pointer into tile map (LO)
0008FE  2  85 30            sta     ZP_PTR_LO               ; set upper pointer into tile map (LO)
000900  2  90 02            bcc     dont_inc2               ; go if no overflow
000902  2  E6 31            inc     ZP_PTR_HI               ; adjust upper pointer into tile map (HI)
000904  2               dont_inc2:
000904  2               
000904  2                   ; setup the data pointers to write one character (upper and lower)
000904  2               
000904  2  A6 30            ldx     ZP_PTR_LO               ; get upper pointer into tile map (LO)
000906  2  A4 31            ldy     ZP_PTR_HI               ; get upper pointer into tile map (HI)
000908  2  A9 00            lda     #0                      ; always in bank 0
00090A  2  09 10 9C 25      VERA_SET_ADDR0_XYA              ; use Data0 register for upper
00090E  2  9F 8D 22 9F  
000912  2  8C 21 9F 8E  
000918  2               
000918  2  A9 00            lda     #0
00091A  2               write_char:
00091A  2  8D 23 9F         sta     VERA_data0
00091D  2  AC 23 9F         ldy     VERA_data0              ; cause address increment
000920  2  1A               inc
000921  2               
000921  2                   ; advance to the next character to write
000921  2               
000921  2  C6 38            dec     ZP_CHAR_CNT             ; we finished one character
000923  2  D0 F5            bne     write_char              ; back if more to write
000925  2               text_done:
000925  2  60               rts
000926  2               
000926  1               
000926  1  00 00        default_irq_vector: .addr 0
000928  1               
000928  1               start:
000928  1  9C 25 9F         stz     VERA_ctrl     ; no reset/DCSEL/ADDRSEL
00092B  1  9C 29 9F         stz     VERA_dc_video ; disable display
00092E  1               
00092E  1  9C 25 9F A9      FILLVRAM $00, $00000, $8000
000932  1  10 8D 22 9F  
000936  1  A9 00 8D 21  
00095B  1  9C 25 9F A9      FILLVRAM $00, $08000, $8000
00095F  1  10 8D 22 9F  
000963  1  A9 80 8D 21  
000988  1  9C 25 9F A9      FILLVRAM $00, $10000, $8000
00098C  1  11 8D 22 9F  
000990  1  A9 00 8D 21  
0009B5  1  9C 25 9F A9      FILLVRAM $00, $18000, $79C0
0009B9  1  11 8D 22 9F  
0009BD  1  A9 80 8D 21  
0009E2  1  9C 25 9F A9      FILLVRAM $00, $1FC00, $0400
0009E6  1  11 8D 22 9F  
0009EA  1  A9 FC 8D 21  
000A0F  1               
000A0F  1  20 27 08         jsr     load_text_data
000A12  1  20 43 08         jsr     load_palette
000A15  1  20 35 0A         jsr     init_global_video_regs
000A18  1  20 5F 08         jsr     init_text_tile_information
000A1B  1               
000A1B  1  A9 6A            lda     #106
000A1D  1  85 38            sta     ZP_CHAR_CNT
000A1F  1  A9 05            lda     #5
000A21  1  85 36            sta     ZP_TILE_ROW
000A23  1  A9 00            lda     #0
000A25  1  85 37            sta     ZP_TILE_COL
000A27  1  20 DC 08         jsr     write_text
000A2A  1               
000A2A  1  9C 25 9F         stz     VERA_ctrl     ; no reset/DCSEL/ADDRSEL
000A2D  1  A9 31            lda     #ENABLE_LAYER_1|ENABLE_LAYER_0|OUTPUT_MODE_VGA
000A2F  1  8D 29 9F         sta     VERA_dc_video
000A32  1               
000A32  1               @main_loop:
000A32  1  CB               wai
000A33  1  80 FD            bra @main_loop  ; never return, just wait for reset
000A35  1               
000A35  1               init_global_video_regs:
000A35  1                   ; set the various VERA registers needed
000A35  1               
000A35  1                   ; for DCSEL = 0
000A35  1  9C 25 9F         stz     VERA_ctrl           ; no reset/DCSEL/ADDRSEL
000A38  1  A9 80            lda     #DISPLAY_SCALE
000A3A  1  8D 2A 9F         sta     VERA_dc_hscale
000A3D  1  8D 2B 9F         sta     VERA_dc_vscale
000A40  1  9C 2C 9F         stz     VERA_dc_border
000A43  1               
000A43  1                   ; for DCSEL = 1
000A43  1  A9 02            lda     #DCSEL
000A45  1  8D 25 9F         sta     VERA_ctrl
000A48  1  9C 29 9F         stz     VERA_dc_hstart
000A4B  1  A9 A0            lda     #(640>>2)
000A4D  1  8D 2A 9F         sta     VERA_dc_hstop
000A50  1  9C 2B 9F         stz     VERA_dc_vsstart
000A53  1  A9 F0            lda     #(480>>1)
000A55  1  8D 2C 9F         sta     VERA_dc_vstop
000A58  1  60               rts
000A58  1               
